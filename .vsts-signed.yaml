variables:
- name: PB_PublishBlobFeedUrl
  value: https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json
- group: DotNet-Blob-Feed
- name: PB_PublishBlobFeedKey
  value: $(dotnetfeed-storage-access-key-1)
- name: SignType
  value: real
- name: VisualStudioDropName
  value: Products/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)

jobs:
- job: Full_Signed
  pool:
    name: VSEng-MicroBuildVS2017
  timeoutInMinutes: 300
  variables:
    BuildConfiguration: 'Release'
  steps:

  # Install Signing Plugin
  - task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@1
    displayName: Install Signing Plugin
    inputs:
      signType: real
      esrpSigning: true
    condition: and(succeeded(), ne(variables['SignType'], ''))

  # Build
  - script: eng\CIBuild.cmd
            -configuration $(BuildConfiguration)
            -testAll
            /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
            /p:VisualStudioDropName=$(VisualStudioDropName)
            /p:DotNetSignType=$(SignType)
            /p:PublishToSymbolServer=true
            /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)
            /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)
    displayName: Build

  # Publish logs
  - task: PublishBuildArtifacts@1
    displayName: Publish Logs
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)\artifacts\log\$(BuildConfiguration)'
      ArtifactName: 'Build Diagnostic Files'
      publishLocation: Container
    continueOnError: true
    condition: succeededOrFailed()

  # Publish test results
  - task: PublishBuildArtifacts@1
    displayName: Publish Test Results
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)\artifacts\TestResults'
      ArtifactName: 'Test Results'
      publishLocation: Container
    continueOnError: true
    condition: succeededOrFailed()

  # Upload VSTS Drop
  - task: ms-vseng.MicroBuildTasks.4305a8de-ba66-4d8b-b2d1-0dc4ecbbf5e8.MicroBuildUploadVstsDropFolder@1
    displayName: Upload VSTS Drop
    inputs:
      DropName: $(VisualStudioDropName)
      DropFolder: '$(Build.SourcesDirectory)\artifacts\VSSetup\$(BuildConfiguration)\Insertion'
    condition: succeeded()

  # Publish an artifact that the RoslynInsertionTool is able to find by its name.
  - task: PublishBuildArtifacts@1
    displayName: Publish Artifact VSSetup
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)\artifacts\VSSetup\$(BuildConfiguration)\Insertion'
      ArtifactName: 'VSSetup'
    condition: succeeded()

    # Archive NuGet packages to DevOps.
  - task: PublishBuildArtifacts@1
    displayName: Publish Artifact Packages
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)\artifacts\packages\$(BuildConfiguration)'
      ArtifactName: 'Packages'
    condition: succeeded()

  # Publish nightly package to MyGet
  - task: PowerShell@1
    displayName: Publish nightly package to MyGet
    inputs:
      scriptName: 'setup\publish-assets.ps1'
      arguments: '-binariesPath artifacts\bin -configuration $(BuildConfiguration) -branchName $(Build.SourceBranch) -apiKey $(FSharp.MyGetApiKey)'
    condition: and(succeeded(), contains(variables['PB_PublishType'], 'myget'))

  # Package publish
  - task: CmdLine@1
    displayName: Restore package publishing
    inputs:
      filename: '.nuget\NuGet.exe'
      arguments: 'restore packages.config -PackagesDirectory packages -Source https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json'
    condition: and(succeeded(), contains(variables['PB_PublishType'], 'blob'))
  - task: MSBuild@1
    displayName: Publish packages to Azure Blob Storage
    inputs:
      solution: PublishToBlob.proj
      msbuildArguments: '/t:Build /p:Configuration=$(BuildConfiguration) /p:ExpectedFeedUrl=$(PB_PublishBlobFeedUrl) /p:AccountKey=$(PB_PublishBlobFeedKey) /p:ManifestRepouri=$(Build.Repository.Uri) /p:ManifestBranch=$(Build.SourceBranch) /p:ManifestCommit=$(Build.SourceVersion) /p:ManifestBuildId=$(Build.BuildNumber) /bl:$(Build.SourcesDirectory)/artifacts/log/$(BuildConfiguration)/pub/publish.binlog'
    condition: and(succeeded(), contains(variables['PB_PublishType'], 'blob'))
  - task: PublishBuildArtifacts@1
    displayName: Publish publishing bin log
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/$(BuildConfiguration)/pub'
      ArtifactName: 'Publish_bin_log'
      publishLocation: Container
    continueOnError: true
    condition: and(succeeded(), contains(variables['PB_PublishType'], 'blob'))
  - task: CopyFiles@2
    displayName: Gather Asset Manifests
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)/artifacts/log/$(BuildConfiguration)/AssetManifest'
      TargetFolder: '$(Build.StagingDirectory)/AssetManifests'
    continueOnError: true
    condition: and(succeeded(), contains(variables['PB_PublishType'], 'blob'))
  - task: PublishBuildArtifacts@1
    displayName: Push Asset Manifests
    inputs:
      PathtoPublish: '$(Build.StagingDirectory)/AssetManifests'
      PublishLocation: Container
      ArtifactName: AssetManifests
    continueOnError: true
    condition: and(succeeded(), contains(variables['PB_PublishType'], 'blob'))

  # Execute cleanup tasks
  - task: ms-vseng.MicroBuildTasks.521a94ea-9e68-468a-8167-6dcf361ea776.MicroBuildCleanup@1
    displayName: Execute cleanup tasks
    condition: succeededOrFailed()

- template: /eng/common/templates/job/publish-build-assets.yml
  parameters:
    dependsOn:
    - Full_Signed
    pool:
      vmImage: vs2017-win2016
    enablePublishBuildArtifacts: true
